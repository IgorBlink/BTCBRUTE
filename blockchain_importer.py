import hashlib
import requests
import json
import sqlite3
from typing import List, Generator
import time
from pathlib import Path
import gzip
import csv
from bitcoin_checker import BitcoinChecker
import asyncio

class BlockchainImporter:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.checker = BitcoinChecker()
        
    async def check_address_transactions(self, address: str) -> dict:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ Bitcoin API
        """
        try:
            if not hasattr(self, 'stats'):
                self.stats = {'checked': 0, 'with_tx': 0, 'without_tx': 0}
            self.stats['checked'] += 1

            result = self.checker.check_address(address)
            
            if result and result['n_tx'] > 0:
                self.stats['with_tx'] += 1
                print("\n" + "="*50)
                print("üéâ –ù–ê–ô–î–ï–ù –ê–ö–¢–ò–í–ù–´–ô –ö–û–®–ï–õ–ï–ö! üéâ")
                print("="*50)
                print(f"üìç –ê–¥—Ä–µ—Å: {address}")
                print(f"üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {result['n_tx']}")
                print(f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ: {result['total_received']} satoshi")
                print(f"üíé –ë–∞–ª–∞–Ω—Å: {result['balance']} satoshi")
                print("="*50)
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                balance = self.checker.get_balance(address)
                if balance > 0:
                    print(f"\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} satoshi")
                
                return result
                
            self.stats['without_tx'] += 1
            if self.stats['checked'] % 1000 == 0:
                print(f"\nüìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {self.stats['checked']:,}")
                print(f"   üí∞ –° —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏: {self.stats['with_tx']}")
                
            return None
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
            return None
            
    async def __aenter__(self):
        await self.checker.connect()
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        await self.checker.close()

    def setup_database(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        c.execute('DROP TABLE IF EXISTS success_addresses')
        c.execute('DROP TABLE IF EXISTS checked_addresses')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ (—É—Å–ø–µ—à–Ω—ã–µ –Ω–∞—Ö–æ–¥–∫–∏)
        c.execute('''CREATE TABLE IF NOT EXISTS success_addresses
                    (address TEXT PRIMARY KEY,
                     private_key_hex TEXT,
                     wif TEXT,
                     pattern TEXT,
                     n_tx INTEGER,
                     total_received INTEGER,
                     timestamp TEXT)''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        c.execute('''CREATE TABLE IF NOT EXISTS checked_addresses
                    (address TEXT PRIMARY KEY,
                     private_key_hex TEXT,
                     wif TEXT,
                     pattern TEXT,
                     timestamp TEXT)''')
        
        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        c.execute('CREATE INDEX IF NOT EXISTS idx_n_tx ON success_addresses(n_tx)')
        c.execute('CREATE INDEX IF NOT EXISTS idx_pattern ON checked_addresses(pattern)')
        
        conn.commit()
        conn.close()

    def _parse_blockchain_info(self, data: dict) -> dict:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç blockchain.info API"""
        n_tx = data.get('n_tx', 0)
        if n_tx > 0:
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {n_tx}")
            print(f"   –ü–æ–ª—É—á–µ–Ω–æ –≤—Å–µ–≥–æ: {data.get('total_received', 0)} satoshi")
            return {
                'n_tx': n_tx,
                'total_received': data.get('total_received', 0),
                'first_seen': data.get('first_seen', ''),
            }
        return None

    def _parse_blockchair(self, data: dict) -> dict:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç blockchair API"""
        if 'data' in data and len(data['data']) > 0:
            address_data = next(iter(data['data'].values()))['address']
            tx_count = address_data.get('transaction_count', 0)
            
            if tx_count > 0:
                print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!")
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {tx_count}")
                print(f"   –ü–æ–ª—É—á–µ–Ω–æ –≤—Å–µ–≥–æ: {address_data.get('received', 0)} satoshi")
                return {
                    'n_tx': tx_count,
                    'total_received': address_data.get('received', 0),
                    'first_seen': address_data.get('first_seen', ''),
                }
        return None

    def save_success_address(self, address: str, private_key: bytes, pattern: str, tx_info: dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–¥—Ä–µ—Å —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏"""
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        
        c.execute('''INSERT OR REPLACE INTO success_addresses 
                    (address, private_key_hex, wif, pattern, n_tx, 
                     total_received, timestamp)
                    VALUES (?, ?, ?, ?, ?, ?, datetime('now'))''',
                 (address, private_key.hex(), self.private_key_to_wif(private_key),
                  pattern, tx_info['n_tx'], tx_info['total_received']))
        
        conn.commit()
        conn.close()

    def save_checked_address(self, address: str, private_key: bytes, pattern: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        try:
            conn = sqlite3.connect(self.db_path)
            c = conn.cursor()
            
            wif = self.private_key_to_wif(private_key)
            c.execute('''INSERT OR IGNORE INTO checked_addresses 
                        (address, private_key_hex, wif, pattern, timestamp)
                        VALUES (?, ?, ?, ?, datetime('now'))''',
                     (address, private_key.hex(), wif, pattern))
            
            conn.commit()
            conn.close()
            
        except sqlite3.OperationalError as e:
            # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –±–∞–∑—É
            print("\n–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            self.setup_database()
            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            self.save_checked_address(address, private_key, pattern)
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞: {e}")

    def is_address_checked(self, address: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ –∞–¥—Ä–µ—Å —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω"""
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        
        c.execute("""SELECT 1 FROM checked_addresses WHERE address = ?
                    UNION ALL
                    SELECT 1 FROM success_addresses WHERE address = ?""",
                 (address, address))
        
        result = c.fetchone() is not None
        conn.close()
        return result

    def import_from_csv(self, file_path: str, batch_size: int = 1000):
        """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∞–¥—Ä–µ—Å–∞ –∏–∑ CSV —Ñ–∞–π–ª–∞"""
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        
        total_imported = 0
        batch = []
        
        print(f"–ò–º–ø–æ—Ä—Ç –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ {file_path}")
        
        with open(file_path, 'r') as f:
            reader = csv.DictReader(f)
            for row in reader:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º WIF
                private_key_hex = row.get('private_key_hex', '')
                wif = ''
                if private_key_hex:
                    try:
                        private_key = bytes.fromhex(private_key_hex)
                        wif = self.private_key_to_wif(private_key)
                    except:
                        pass
                
                batch.append((
                    row['address'],
                    private_key_hex,
                    wif,
                    row.get('first_seen', ''),
                    row.get('last_seen', ''),
                    int(row.get('total_received', 0)),
                    int(row.get('total_sent', 0)),
                    int(row.get('balance', 0)),
                    int(row.get('n_tx', 0))
                ))
                
                if len(batch) >= batch_size:
                    c.executemany('''INSERT OR REPLACE INTO known_addresses 
                                   VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)''', batch)
                    conn.commit()
                    total_imported += len(batch)
                    print(f"\r–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∞–¥—Ä–µ—Å–æ–≤: {total_imported}", end='')
                    batch = []
        
        if batch:
            c.executemany('INSERT OR REPLACE INTO known_addresses VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)', batch)
            conn.commit()
            total_imported += len(batch)
            
        print(f"\n–í—Å–µ–≥–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {total_imported} –∞–¥—Ä–µ—Å–æ–≤")
        conn.close()

    def import_from_blockchain_info(self, start_block: int, end_block: int):
        """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∞–¥—Ä–µ—Å–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞ —á–µ—Ä–µ–∑ API"""
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        
        for block in range(start_block, end_block + 1):
            try:
                url = f"https://blockchain.info/block-height/{block}?format=json"
                response = requests.get(url)
                data = response.json()
                
                for tx in data['blocks'][0]['tx']:
                    # –°–æ–±–∏—Ä–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∏–∑ –≤—ã—Ö–æ–¥–æ–≤
                    for output in tx['out']:
                        if 'addr' in output:
                            c.execute('''INSERT OR IGNORE INTO known_addresses 
                                       (address, first_seen, balance) 
                                       VALUES (?, datetime('now'), ?)''',
                                    (output['addr'], output['value']))
                
                conn.commit()
                print(f"\r–û–±—Ä–∞–±–æ—Ç–∞–Ω –±–ª–æ–∫: {block}", end='')
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
                time.sleep(1)
                
            except Exception as e:
                print(f"\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–ª–æ–∫–∞ {block}: {e}")
                continue
        
        conn.close()

    def get_address_info(self, address: str) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥—Ä–µ—Å–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        
        c.execute("SELECT * FROM known_addresses WHERE address=?", (address,))
        result = c.fetchone()
        
        conn.close()
        
        if result:
            return {
                'address': result[0],
                'first_seen': result[1],
                'last_seen': result[2],
                'total_received': result[3],
                'total_sent': result[4],
                'balance': result[5],
                'n_tx': result[6]
            }
        return None

    def get_rich_addresses(self, min_balance: int = 1000000) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ —Å –±–∞–ª–∞–Ω—Å–æ–º –≤—ã—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ"""
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        
        c.execute("SELECT address, balance FROM known_addresses WHERE balance >= ?", 
                 (min_balance,))
        results = c.fetchall()
        
        conn.close()
        return [(row[0], row[1]) for row in results] 

    def private_key_to_wif(self, private_key: bytes) -> str:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç WIF
        """
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é —Å–µ—Ç–∏ (0x80 –¥–ª—è mainnet)
        version_key = b'\x80' + private_key
        
        # –î–≤–æ–π–Ω–æ–π SHA256 –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
        double_sha256 = hashlib.sha256(
            hashlib.sha256(version_key).digest()
        ).digest()
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 4 –±–∞–π—Ç–∞ –∫–∞–∫ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É
        checksum = double_sha256[:4]
        
        # –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –¥–≤–æ–∏—á–Ω—ã–π WIF
        binary_wif = version_key + checksum
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base58
        return self.base58_encode(binary_wif)
        
    def base58_encode(self, data: bytes) -> str:
        """
        –ö–æ–¥–∏—Ä—É–µ—Ç –±–∞–π—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç Base58
        """
        alphabet = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
        n = int.from_bytes(data, byteorder='big')
        result = ''
        
        while n > 0:
            n, r = divmod(n, 58)
            result = alphabet[r] + result
            
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–¥—É—â–∏–µ '1' –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω—É–ª–µ–≤–æ–≥–æ –±–∞–π—Ç–∞
        for b in data:
            if b == 0:
                result = '1' + result
            else:
                break
                
        return result 

    def check_address_local(self, address: str) -> dict:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–¥—Ä–µ—Å –ª–æ–∫–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ñ–∞–π–ª
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect(self.db_path)
            c = conn.cursor()
            
            c.execute("""
                SELECT n_tx, total_received, first_seen 
                FROM success_addresses 
                WHERE address = ?
            """, (address,))
            
            result = c.fetchone()
            conn.close()
            
            if result:
                return {
                    'n_tx': result[0],
                    'total_received': result[1],
                    'first_seen': result[2]
                }
                
            # –ï—Å–ª–∏ –∞–¥—Ä–µ—Å–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ API
            return self.check_address_transactions(address)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥—Ä–µ—Å–∞: {e}")
            return None 