import numpy as np
import hashlib
import time
from typing import List, Tuple
import ecdsa
from concurrent.futures import ThreadPoolExecutor
import queue
import secrets
import multiprocessing

class GPUBitcoinGenerator:
    def __init__(self, batch_size: int = 1000):
        self.batch_size = batch_size
        self.secp256k1 = ecdsa.SECP256k1
        self.address_queue = queue.Queue()
        self.num_threads = multiprocessing.cpu_count()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–¥—Ä–∞ CPU
        print(f"\nüíª CPU Threads available: {self.num_threads}")
        
    def generate_batch(self) -> List[Tuple[str, bytes]]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç batch –∞–¥—Ä–µ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –Ω–∞ CPU"""
        try:
            chunk_size = max(1, self.batch_size // self.num_threads)
            remaining = self.batch_size
            results = []
            
            print(f"   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {self.batch_size} –∞–¥—Ä–µ—Å–æ–≤ –≤ {self.num_threads} –ø–æ—Ç–æ–∫–∞—Ö")
            print(f"   –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: {chunk_size} –∞–¥—Ä–µ—Å–æ–≤")
            
            with ThreadPoolExecutor(max_workers=self.num_threads) as executor:
                futures = []
                while remaining > 0:
                    current_chunk = min(chunk_size, remaining)
                    futures.append(executor.submit(self._generate_chunk, current_chunk))
                    remaining -= current_chunk
                
                for i, future in enumerate(futures, 1):
                    chunk_results = future.result()
                    results.extend(chunk_results)
                    print(f"   ‚úì –ß–∞–Ω–∫ {i}/{len(futures)} –≥–æ—Ç–æ–≤: {len(chunk_results)} –∞–¥—Ä–µ—Å–æ–≤")
                    
            print(f"   ‚úì –í—Å–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(results)} –∞–¥—Ä–µ—Å–æ–≤")
            return results[:self.batch_size]
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            print("   ‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            return self._generate_batch_simple()
    
    def _generate_chunk(self, chunk_size: int) -> List[Tuple[str, bytes]]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–∞—Å—Ç—å –∞–¥—Ä–µ—Å–æ–≤ –≤ –æ–¥–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        chunk_results = []
        for _ in range(chunk_size):
            try:
                private_key = secrets.token_bytes(32)
                address, _ = self._private_to_address(private_key)
                chunk_results.append((address, private_key))
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —á–∞–Ω–∫–µ: {e}")
                continue
        return chunk_results
    
    def _generate_batch_simple(self) -> List[Tuple[str, bytes]]:
        """–ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        results = []
        print(f"   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {self.batch_size} –∞–¥—Ä–µ—Å–æ–≤ –ø—Ä–æ—Å—Ç—ã–º –º–µ—Ç–æ–¥–æ–º")
        for i in range(self.batch_size):
            try:
                private_key = secrets.token_bytes(32)
                address, _ = self._private_to_address(private_key)
                results.append((address, private_key))
                if (i + 1) % 10 == 0:
                    print(f"   ‚úì –ü—Ä–æ–≥—Ä–µ—Å—Å: {i + 1}/{self.batch_size}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                continue
        print(f"   ‚úì –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(results)} –∞–¥—Ä–µ—Å–æ–≤")
        return results
        
    def _private_to_address(self, private_key: bytes) -> Tuple[str, bytes]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ –∞–¥—Ä–µ—Å"""
        signing_key = ecdsa.SigningKey.from_string(private_key, curve=self.secp256k1)
        verifying_key = signing_key.get_verifying_key()
        public_key = verifying_key.to_string()
        
        # SHA256
        sha256_hash = hashlib.sha256(public_key).digest()
        
        # RIPEMD160
        ripemd160 = hashlib.new('ripemd160')
        ripemd160.update(sha256_hash)
        hash160 = ripemd160.digest()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é —Å–µ—Ç–∏
        version_hash160 = b'\x00' + hash160
        
        # –î–≤–æ–π–Ω–æ–π SHA256 –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
        double_sha256 = hashlib.sha256(
            hashlib.sha256(version_hash160).digest()
        ).digest()
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 4 –±–∞–π—Ç–∞ –∫–∞–∫ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É
        checksum = double_sha256[:4]
        
        # –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –¥–≤–æ–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å
        binary_address = version_hash160 + checksum
        
        return self.base58_encode(binary_address), private_key
        
    def base58_encode(self, data: bytes) -> str:
        """–ö–æ–¥–∏—Ä—É–µ—Ç –±–∞–π—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç Base58"""
        alphabet = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
        n = int.from_bytes(data, byteorder='big')
        result = ''
        
        while n > 0:
            n, r = divmod(n, 58)
            result = alphabet[r] + result
            
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–¥—É—â–∏–µ '1' –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω—É–ª–µ–≤–æ–≥–æ –±–∞–π—Ç–∞
        for b in data:
            if b == 0:
                result = '1' + result
            else:
                break
                
        return result 