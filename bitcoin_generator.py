import hashlib
import secrets
from typing import Tuple, List
import ecdsa
from bitcoinlib.keys import HDKey
from bitcoinlib.wallets import Wallet
import threading
import queue
import sqlite3
from concurrent.futures import ThreadPoolExecutor
import time

class BitcoinAddressGenerator:
    def __init__(self, db_path: str = None):
        self.secp256k1 = ecdsa.SECP256k1
        self.db_path = db_path
        self.address_queue = queue.Queue()
        self.running = False
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–º–ø–æ—Ä—Ç–µ—Ä–∞
        if db_path:
            from blockchain_importer import BlockchainImporter
            self.importer = BlockchainImporter(db_path)
            self.importer.setup_database()
        
    def setup_database(self):
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤"""
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS known_addresses
                    (address TEXT PRIMARY KEY, private_key_hex TEXT, wif TEXT)''')
        c.execute('''CREATE TABLE IF NOT EXISTS found_matches
                    (address TEXT PRIMARY KEY, private_key_hex TEXT, 
                     wif TEXT, timestamp TEXT)''')
        conn.commit()
        conn.close()

    def add_known_address(self, address: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        if self.db_path:
            conn = sqlite3.connect(self.db_path)
            c = conn.cursor()
            c.execute("INSERT OR IGNORE INTO known_addresses (address) VALUES (?)", 
                     (address,))
            conn.commit()
            conn.close()

    def check_address_exists(self, address: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        if self.db_path:
            conn = sqlite3.connect(self.db_path)
            c = conn.cursor()
            c.execute("SELECT address FROM known_addresses WHERE address=?", 
                     (address,))
            result = c.fetchone() is not None
            conn.close()
            return result
        return False

    def save_match(self, address: str, private_key: bytes):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"""
        if self.db_path:
            wif = self.private_key_to_wif(private_key)
            conn = sqlite3.connect(self.db_path)
            c = conn.cursor()
            c.execute("""INSERT INTO found_matches 
                        (address, private_key_hex, wif, timestamp) 
                        VALUES (?, ?, ?, datetime('now'))""",
                     (address, private_key.hex(), wif))
            conn.commit()
            conn.close()

    def generate_with_pattern(self, pattern: str, position: int = 0) -> Tuple[str, bytes, dict]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–¥—Ä–µ—Å–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É
        """
        count = 0
        addresses_checked = set()
        
        print(f"\nüîç –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞: {pattern}")
        print(f"   –ü–æ–∑–∏—Ü–∏—è: {position}")
        
        while True:
            try:
                private_key = secrets.randbits(256)
                pattern_int = int(pattern, 2)
                mask = ((1 << len(pattern)) - 1) << (256 - len(pattern) - position)
                
                private_key = (private_key & ~mask) | (pattern_int << (256 - len(pattern) - position))
                key_bytes = private_key.to_bytes(32, 'big')
                
                public_key = self.private_to_public(key_bytes)
                address = self.public_to_address(public_key)
                
                if address in addresses_checked:
                    continue
                    
                addresses_checked.add(address)
                count += 1
                
                if not self.importer.is_address_checked(address):
                    # –ü—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
                    self.importer.save_checked_address(address, key_bytes, pattern)
                    
                    if count % 100 == 0:
                        print(f"\rüí´ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {count} –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ {pattern}", end="")
                
            except Exception as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
                time.sleep(1)
                continue

    def start_generation(self, patterns: List[str], num_threads: int = 4):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏"""
        self.running = True
        
        def worker(pattern):
            while self.running:
                try:
                    address, private_key = self.generate_with_pattern(pattern)
                    self.address_queue.put((address, private_key))
                except Exception as e:
                    print(f"Error in worker: {e}")

        with ThreadPoolExecutor(max_workers=num_threads) as executor:
            futures = [executor.submit(worker, pattern) for pattern in patterns]
            
        return futures

    def stop_generation(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é"""
        self.running = False

    def generate_private_key(self, fixed_bits: str = None) -> bytes:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–∫—Å–∞—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –±–∏—Ç
        
        Args:
            fixed_bits: –°—Ç—Ä–æ–∫–∞ –∏–∑ '0' –∏ '1', –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∞—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∏—Ç—ã
        Returns:
            32 –±–∞–π—Ç–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        """
        if fixed_bits:
           
            fixed_value = int(fixed_bits, 2)
        
            random_bits = secrets.randbits(256 - len(fixed_bits))
           
            private_key = (fixed_value << (256 - len(fixed_bits))) | random_bits
            return private_key.to_bytes(32, 'big')
        else:
            return secrets.token_bytes(32)

    def private_to_public(self, private_key: bytes) -> bytes:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ –ø—É–±–ª–∏—á–Ω—ã–π –∏—Å–ø–æ–ª—å–∑—É—è ECDSA
        """
        signing_key = ecdsa.SigningKey.from_string(private_key, curve=self.secp256k1)
        verifying_key = signing_key.get_verifying_key()
        return verifying_key.to_string()

    def public_to_address(self, public_key: bytes) -> str:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –≤ –±–∏—Ç–∫–æ–∏–Ω-–∞–¥—Ä–µ—Å
        """
        # SHA256
        sha256_hash = hashlib.sha256(public_key).digest()
        
        # RIPEMD160
        ripemd160 = hashlib.new('ripemd160')
        ripemd160.update(sha256_hash)
        hash160 = ripemd160.digest()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é —Å–µ—Ç–∏ (0x00 –¥–ª—è mainnet)
        version_hash160 = b'\x00' + hash160
        
        # –î–≤–æ–π–Ω–æ–π SHA256 –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
        double_sha256 = hashlib.sha256(
            hashlib.sha256(version_hash160).digest()
        ).digest()
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 4 –±–∞–π—Ç–∞ –∫–∞–∫ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É
        checksum = double_sha256[:4]
        
        # –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –¥–≤–æ–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å
        binary_address = version_hash160 + checksum
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base58
        return self.base58_encode(binary_address)

    def base58_encode(self, data: bytes) -> str:
        """
        –ö–æ–¥–∏—Ä—É–µ—Ç –±–∞–π—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç Base58
        """
        alphabet = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
        n = int.from_bytes(data, byteorder='big')
        result = ''
        
        while n > 0:
            n, r = divmod(n, 58)
            result = alphabet[r] + result
            
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–¥—É—â–∏–µ '1' –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω—É–ª–µ–≤–æ–≥–æ –±–∞–π—Ç–∞
        for b in data:
            if b == 0:
                result = '1' + result
            else:
                break
                
        return result

    def generate_address(self, fixed_bits: str = None) -> Tuple[str, bytes]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ä—É –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á - –±–∏—Ç–∫–æ–∏–Ω –∞–¥—Ä–µ—Å
        
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–∞–¥—Ä–µ—Å, –ø—Ä–∏–≤–∞—Ç–Ω—ã–π_–∫–ª—é—á)
        """
        private_key = self.generate_private_key(fixed_bits)
        public_key = self.private_to_public(private_key)
        address = self.public_to_address(public_key)
        return address, private_key 

    def private_key_to_wif(self, private_key: bytes) -> str:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç WIF (Wallet Import Format)
        
        Args:
            private_key: –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ –±–∞–π—Ç–∞—Ö
        Returns:
            WIF —Å—Ç—Ä–æ–∫–∞
        """
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é —Å–µ—Ç–∏ (0x80 –¥–ª—è mainnet)
        version_key = b'\x80' + private_key
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–π—Ç –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (0x01)
        # version_key += b'\x01'  # —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –∫–æ–º–ø—Ä–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
        
        # –î–≤–æ–π–Ω–æ–π SHA256 –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
        double_sha256 = hashlib.sha256(
            hashlib.sha256(version_key).digest()
        ).digest()
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 4 –±–∞–π—Ç–∞ –∫–∞–∫ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É
        checksum = double_sha256[:4]
        
        # –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –¥–≤–æ–∏—á–Ω—ã–π WIF
        binary_wif = version_key + checksum
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base58
        return self.base58_encode(binary_wif) 

    def generate_hd_wallet(self, private_key: bytes) -> dict:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HD –∫–æ—à–µ–ª–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Electrum
        
        Args:
            private_key: –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ –±–∞–π—Ç–∞—Ö
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∞–¥—Ä–µ—Å–∞–º–∏
        """
        # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        master_key = HDKey.from_seed(private_key)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π receiving –∞–¥—Ä–µ—Å (m/0/0)
        receiving_key = master_key.child_private(0).child_private(0)
        receiving_address = receiving_key.address()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π change –∞–¥—Ä–µ—Å (m/1/0)
        change_key = master_key.child_private(1).child_private(0)
        change_address = change_key.address()
        
        return {
            'master_key': master_key,
            'receiving_address': receiving_address,
            'change_address': change_address
        } 

    def generate_addresses_batch(self, batch_size: int = 1000) -> List[Tuple[str, bytes]]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞–∫–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        results = []
        for _ in range(batch_size):
            address, private_key = self.generate_address()
            results.append((address, private_key))
        return results 