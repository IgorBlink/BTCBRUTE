import os
import hashlib
from bit import Key
from blockchain_importer import BlockchainImporter
import asyncio
import random
import string
from bitcoin_checker import BitcoinChecker
from concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor
import time
from datetime import datetime
import msvcrt
from pattern_generator import PatternGenerator, COMMON_PATTERNS
import aiohttp
from typing import List, Tuple, Dict
import json
import psutil
import threading

# ASCII –∞—Ä—Ç –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
PROGRAM_INFO = """
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë         ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  
‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë         ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
                                                                       
        üîç Bitcoin Address Checker and Generator üîç
        Version: 2.0.0 (GPU Accelerated)
        Created by: IgorBlink
        GitHub: https://github.com/IgorBlink

Features:
‚Ä¢ GPU-—É—Å–∫–æ—Ä–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è Bitcoin –∞–¥—Ä–µ—Å–æ–≤
‚Ä¢ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–æ API
‚Ä¢ –ú—É–ª—å—Ç–∏–ø–æ—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

Press any key to start...
"""

class ResourceMonitor:
    def __init__(self):
        self.cpu_percent = 0
        self.ram_percent = 0
        self.is_monitoring = False
        
    def start_monitoring(self):
        self.is_monitoring = True
        threading.Thread(target=self._monitor_resources, daemon=True).start()
        
    def stop_monitoring(self):
        self.is_monitoring = False
        
    def _monitor_resources(self):
        while self.is_monitoring:
            self.cpu_percent = psutil.cpu_percent(interval=1)
            self.ram_percent = psutil.virtual_memory().percent
            time.sleep(1)
            
    def get_stats(self):
        return {
            'cpu': self.cpu_percent,
            'ram': self.ram_percent
        }

class OptimizedAddressChecker:
    def __init__(self, batch_size: int = 1000, api_concurrency: int = 15,
                 cpu_usage: int = 80, ram_usage: int = 80):
        self.batch_size = batch_size
        self.api_concurrency = api_concurrency
        self.cpu_target = cpu_usage
        self.ram_target = ram_usage
        self.session = None
        self.api_semaphore = asyncio.Semaphore(api_concurrency)
        self.resource_monitor = ResourceMonitor()
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤
        cpu_count = psutil.cpu_count()
        self.process_pool = ProcessPoolExecutor(
            max_workers=cpu_count * 4  # –í 4 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —á–µ–º —è–¥–µ—Ä
        )
        
        self.thread_pool = ThreadPoolExecutor(
            max_workers=cpu_count * 8  # –í 8 —Ä–∞–∑ –±–æ–ª—å—à–µ –ø–æ—Ç–æ–∫–æ–≤ —á–µ–º —è–¥–µ—Ä
        )
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å API
        self.api_endpoints = [
            "https://blockstream.info/api",
            "https://blockchain.info",
            "https://api.blockcypher.com/v1/btc/main"
        ]
        self.cache = {}
        self.current_endpoint = 0
        self.last_adjustment_time = time.time()
        self.speed_history = []  # –ò—Å—Ç–æ—Ä–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.pattern_generator = PatternGenerator()
        
    def adjust_resources(self, current_speed: float):
        current_time = time.time()
        stats = self.resource_monitor.get_stats()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–∫–æ—Ä–æ—Å—Ç–∏
        self.speed_history.append(current_speed)
        if len(self.speed_history) > 10:
            self.speed_history.pop(0)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥ —Å–∫–æ—Ä–æ—Å—Ç–∏
        speed_trend = 0
        if len(self.speed_history) >= 2:
            speed_trend = self.speed_history[-1] - self.speed_history[0]
        
        # –†–µ–≥—É–ª–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        if current_time - self.last_adjustment_time >= 10:
            self.last_adjustment_time = current_time
            
            # –ï—Å–ª–∏ CPU –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∏–∑–∫–∞—è –∏–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –ø–∞–¥–∞–µ—Ç
            if stats['cpu'] < self.cpu_target - 5 or speed_trend < 0:
                # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å
                new_concurrency = min(500, self.api_concurrency * 2)
                if new_concurrency != self.api_concurrency:
                    print(f"\n‚ö° –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å: {self.api_concurrency} -> {new_concurrency}")
                    self.api_concurrency = new_concurrency
                    self.api_semaphore = asyncio.Semaphore(new_concurrency)
            
            # –ï—Å–ª–∏ CPU –∑–∞–≥—Ä—É–∑–∫–∞ –≤—ã—à–µ —Ü–µ–ª–µ–≤–æ–π
            elif stats['cpu'] > self.cpu_target + 5:
                # –ü–ª–∞–≤–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º
                new_concurrency = max(50, self.api_concurrency - 20)
                if new_concurrency != self.api_concurrency:
                    print(f"\n‚ö° –£–º–µ–Ω—å—à–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å: {self.api_concurrency} -> {new_concurrency}")
                    self.api_concurrency = new_concurrency
                    self.api_semaphore = asyncio.Semaphore(new_concurrency)

    async def init_session(self):
        if not self.session:
            self.session = aiohttp.ClientSession(
                timeout=aiohttp.ClientTimeout(total=10)
            )
        self.resource_monitor.start_monitoring()
            
    async def close(self):
        if self.session:
            await self.session.close()
        self.resource_monitor.stop_monitoring()
        self.process_pool.shutdown()

    async def check_address(self, address: str) -> Dict:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
        local_result = self.pattern_generator.check_address_exists(address)
        if local_result:
            has_tx, total_received = local_result
            if has_tx:
                return {
                    'n_tx': 1,  # –ú–∏–Ω–∏–º—É–º 1 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
                    'total_received': total_received,
                    'balance': 0  # –ë–∞–ª–∞–Ω—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
                }
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ API
        if address in self.cache:
            return self.cache[address]
            
        async with self.api_semaphore:
            endpoint = self.api_endpoints[self.current_endpoint]
            self.current_endpoint = (self.current_endpoint + 1) % len(self.api_endpoints)
            
            try:
                url = f"{endpoint}/address/{address}"
                async with self.session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()
                        result = self._parse_api_response(endpoint, data)
                        if result:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î
                            self.pattern_generator.add_known_address(
                                address,
                                has_transactions=result['n_tx'] > 0,
                                total_received=result['total_received']
                            )
                            self.cache[address] = result
                            return result
            except Exception as e:
                pass
                
        return None
        
    def _parse_api_response(self, endpoint: str, data: Dict) -> Dict:
        try:
            if "blockstream" in endpoint:
                return {
                    'n_tx': data.get('chain_stats', {}).get('tx_count', 0),
                    'total_received': data.get('chain_stats', {}).get('funded_txo_sum', 0),
                    'balance': data.get('chain_stats', {}).get('funded_txo_sum', 0) - 
                             data.get('chain_stats', {}).get('spent_txo_sum', 0)
                }
            elif "blockchain.info" in endpoint:
                return {
                    'n_tx': data.get('n_tx', 0),
                    'total_received': data.get('total_received', 0),
                    'balance': data.get('final_balance', 0)
                }
            elif "blockcypher" in endpoint:
                return {
                    'n_tx': data.get('n_tx', 0),
                    'total_received': data.get('total_received', 0),
                    'balance': data.get('balance', 0)
                }
            elif "btc.com" in endpoint:
                data = data.get('data', {})
                return {
                    'n_tx': data.get('tx_count', 0),
                    'total_received': data.get('received', 0),
                    'balance': data.get('balance', 0)
                }
            elif "blockchair" in endpoint:
                data = data.get('data', {}).get(address, {})
                return {
                    'n_tx': data.get('transaction_count', 0),
                    'total_received': data.get('received', 0),
                    'balance': data.get('balance', 0)
                }
            else:
                return {
                    'n_tx': data.get('transactions', 0),
                    'total_received': data.get('totalReceived', 0),
                    'balance': data.get('balance', 0)
                }
        except Exception:
            return None

async def process_batch(addresses: List[Tuple[str, bytes]], 
                       checker: OptimizedAddressChecker,
                       importer: BlockchainImporter) -> Dict:
    results = {'checked': 0, 'with_tx': 0, 'errors': 0}
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å–∞ –Ω–∞ –ø–æ–¥–≥—Ä—É–ø–ø—ã –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    chunk_size = max(10, len(addresses) // psutil.cpu_count())
    address_chunks = [addresses[i:i + chunk_size] for i in range(0, len(addresses), chunk_size)]
    
    async def process_chunk(chunk: List[Tuple[str, bytes]]):
        tasks = []
        for address, private_key in chunk:
            tasks.append(check_single_address(address, private_key))
        await asyncio.gather(*tasks)
    
    async def check_single_address(address: str, private_key: bytes):
        try:
            result = await checker.check_address(address)
            results['checked'] += 1
            
            if result and result['n_tx'] > 0:
                results['with_tx'] += 1
                importer.save_success_address(address, private_key, "gpu_generated", result)
                print(f"\nüíé –ù–ê–ô–î–ï–ù –ê–ö–¢–ò–í–ù–´–ô –ö–û–®–ï–õ–ï–ö!")
                print(f"   –ê–¥—Ä–µ—Å: {address}")
                print(f"   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {result['n_tx']}")
                print(f"   –ë–∞–ª–∞–Ω—Å: {result['balance']} satoshi")
            else:
                importer.save_checked_address(address, private_key, "gpu_generated")
                
        except Exception as e:
            results['errors'] += 1
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —á–∞–Ω–∫–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    chunk_tasks = [process_chunk(chunk) for chunk in address_chunks]
    await asyncio.gather(*chunk_tasks)
    
    return results

async def generate_and_check_addresses(
    batch_size: int = 1000,
    api_concurrency: int = 20,
    cpu_usage: int = 80,
    ram_usage: int = 80,
    pattern_mode: str = 'random'  # 'random', 'pattern', 'shift', 'repeat', 'old_python', 'sequence'
):
    os.system('cls' if os.name == 'nt' else 'clear')
    print(PROGRAM_INFO)
    
    print("\nüíª –ù–ê–°–¢–†–û–ô–ö–ò:")
    print(f"   CPU –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (—Ü–µ–ª—å): {cpu_usage}%")
    print(f"   RAM –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (—Ü–µ–ª—å): {ram_usage}%")
    print(f"   –î–æ—Å—Ç—É–ø–Ω–æ —è–¥–µ—Ä CPU: {psutil.cpu_count()}")
    print(f"   –î–æ—Å—Ç—É–ø–Ω–æ RAM: {psutil.virtual_memory().total / (1024**3):.1f} GB")
    print(f"   –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: {batch_size}")
    print(f"   –†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {pattern_mode}")
    
    if pattern_mode != 'random':
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:")
        for name in COMMON_PATTERNS:
            print(f"   ‚Ä¢ {name}")
    
    print("\n –ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞...")
    msvcrt.getch()
    os.system('cls' if os.name == 'nt' else 'clear')
    
    db_path = "test.db"
    importer = BlockchainImporter(db_path)
    checker = OptimizedAddressChecker(
        batch_size=batch_size,
        api_concurrency=api_concurrency,
        cpu_usage=cpu_usage,
        ram_usage=ram_usage
    )
    
    await checker.init_session()
    importer.setup_database()
    
    print(f"\n{'='*50}")
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"{'='*50}\n")
    
    total_stats = {'checked': 0, 'with_tx': 0, 'errors': 0, 'start_time': time.time()}
    
    try:
        batch_num = 1
        while True:
            print(f"\nüìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞ {batch_num}...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
            if pattern_mode == 'random':
                addresses = checker.pattern_generator.generate_with_pattern(
                    [], [], batch_size
                )
            elif pattern_mode == 'pattern':
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
                pattern_name = list(COMMON_PATTERNS.keys())[batch_num % len(COMMON_PATTERNS)]
                pattern, mask = COMMON_PATTERNS[pattern_name]
                print(f"   –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern_name}")
                addresses = checker.pattern_generator.generate_with_pattern(
                    pattern, mask, batch_size
                )
            elif pattern_mode == 'old_python':
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å—Ç–∞—Ä–æ–≥–æ Python
                addresses = checker.pattern_generator.generate_with_old_python_pattern(batch_size)
            elif pattern_mode == 'sequence':
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Å–¥–≤–∏–≥
                base_pattern = [1,1,0,0,1,0,1,0] * 4
                addresses = checker.pattern_generator.generate_with_shift_sequence(
                    base_pattern, batch_size
                )
            elif pattern_mode == 'shift':
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–¥–≤–∏–≥–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
                base_pattern = [1,1,0,0,1,0,1,0] * 4
                addresses = checker.pattern_generator.generate_with_shift_pattern(
                    base_pattern, 8, batch_size
                )
            else:  # repeat
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω
                base_pattern = [1,0,1,1,0,0,1,0]
                addresses = checker.pattern_generator.generate_with_repeating_pattern(
                    base_pattern, batch_size
                )
            
            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞ –∏–∑ {len(addresses)} –∞–¥—Ä–µ—Å–æ–≤...")
            batch_stats = await process_batch(addresses, checker, importer)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≤—ã–≤–æ–¥–∏–º –µ—ë
            for key in batch_stats:
                total_stats[key] += batch_stats[key]
            
            resource_stats = checker.resource_monitor.get_stats()
            elapsed_time = time.time() - total_stats['start_time']
            current_speed = total_stats['checked'] / elapsed_time if elapsed_time > 0 else 0
            
            checker.adjust_resources(current_speed)
            
            print(f"\n{'='*50}")
            print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"   ‚úì –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤—Å–µ–≥–æ: {total_stats['checked']:,}")
            print(f"   üíé –° —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏: {total_stats['with_tx']}")
            print(f"   ‚ùå –û—à–∏–±–∫–∏: {total_stats['errors']}")
            print(f"   ‚è±Ô∏è –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {elapsed_time:.1f} —Å–µ–∫")
            print(f"   üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {current_speed:.1f} –∞–¥—Ä–µ—Å–æ–≤/—Å–µ–∫")
            print(f"   üíª CPU: {resource_stats['cpu']:.1f}%")
            print(f"   üßÆ RAM: {resource_stats['ram']:.1f}%")
            print(f"   üì¶ –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: {batch_size}")
            print(f"   üîÑ –¢–µ–∫—É—â–µ–µ –∫–æ–ª-–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {checker.api_concurrency}")
            if len(checker.speed_history) > 1:
                print(f"   üìà –¢—Ä–µ–Ω–¥ —Å–∫–æ—Ä–æ—Å—Ç–∏: {'‚Üë' if checker.speed_history[-1] > checker.speed_history[0] else '‚Üì'}")
            print(f"{'='*50}")
            
            batch_num += 1
            
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await checker.close()

if __name__ == "__main__":
    try:
        print("\nüíª –ù–ê–°–¢–†–û–ô–ö–ê –ü–ê–†–ê–ú–ï–¢–†–û–í")
        cpu_usage = int(input("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CPU (1-100): "))
        ram_usage = int(input("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è RAM (1-100): "))
        batch_size = int(input("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ (10-1000): "))
        api_concurrency = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (10-100): "))
        
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
        print("1. –°–ª—É—á–∞–π–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
        print("2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –∏–∑ —Å—Ç–∞—Ä—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫")
        print("3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ —Å–¥–≤–∏–≥–æ–º")
        print("4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º")
        print("5. –ò–º–∏—Ç–∞—Ü–∏—è –±–∞–≥–æ–≤ —Å—Ç–∞—Ä–æ–≥–æ Python")
        print("6. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Å–¥–≤–∏–≥")
        mode = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∂–∏–º–∞ (1-6): "))
        
        mode_map = {
            1: 'random',
            2: 'pattern',
            3: 'shift',
            4: 'repeat',
            5: 'old_python',
            6: 'sequence'
        }
        pattern_mode = mode_map.get(mode, 'random')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        cpu_usage = max(1, min(100, cpu_usage))
        ram_usage = max(1, min(100, ram_usage))
        batch_size = max(10, min(1000, batch_size))
        api_concurrency = max(10, min(100, api_concurrency))
        
        asyncio.run(generate_and_check_addresses(
            batch_size=batch_size,
            api_concurrency=api_concurrency,
            cpu_usage=cpu_usage,
            ram_usage=ram_usage,
            pattern_mode=pattern_mode
        ))
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}") 