import os
import hashlib
from bit import Key
from blockchain_importer import BlockchainImporter
import asyncio
import random
import string
from bitcoin_checker import BitcoinChecker
from concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor
import time
from datetime import datetime
import msvcrt
from pattern_generator import PatternGenerator, COMMON_PATTERNS
import aiohttp
from typing import List, Tuple, Dict
import json
import psutil
import threading
import sqlite3

# ASCII –∞—Ä—Ç –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
PROGRAM_INFO = """
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë         ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  
‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë         ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
                                                                       
        üîç Bitcoin Address Checker and Generator üîç
        Version: 2.0.0 (GPU Accelerated)
        Created by: IgorBlink
        GitHub: https://github.com/IgorBlink
"""

class ResourceMonitor:
    def __init__(self):
        self.cpu_percent = 0
        self.ram_percent = 0
        self.is_monitoring = False
        
    def start_monitoring(self):
        self.is_monitoring = True
        threading.Thread(target=self._monitor_resources, daemon=True).start()
        
    def stop_monitoring(self):
        self.is_monitoring = False
        
    def _monitor_resources(self):
        while self.is_monitoring:
            self.cpu_percent = psutil.cpu_percent(interval=1)
            self.ram_percent = psutil.virtual_memory().percent
            time.sleep(1)
            
    def get_stats(self):
        return {
            'cpu': self.cpu_percent,
            'ram': self.ram_percent
        }

class OptimizedAddressChecker:
    def __init__(self, batch_size: int = 1000, api_concurrency: int = 15,
                 cpu_usage: int = 80, ram_usage: int = 80, save_checked_addresses=True):
        self.batch_size = batch_size
        self.api_concurrency = api_concurrency
        self.cpu_target = cpu_usage
        self.ram_target = ram_usage
        self.session = None
        self.api_semaphore = asyncio.Semaphore(api_concurrency)
        self.resource_monitor = ResourceMonitor()
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤
        cpu_count = psutil.cpu_count()
        self.process_pool = ProcessPoolExecutor(
            max_workers=cpu_count * 4  # –í 4 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —á–µ–º —è–¥–µ—Ä
        )
        
        self.thread_pool = ThreadPoolExecutor(
            max_workers=cpu_count * 8  # –í 8 —Ä–∞–∑ –±–æ–ª—å—à–µ –ø–æ—Ç–æ–∫–æ–≤ —á–µ–º —è–¥–µ—Ä
        )
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å API
        self.api_endpoints = [
            "https://blockstream.info/api",
            "https://blockchain.info",
            "https://api.blockcypher.com/v1/btc/main"
        ]
        self.cache = {}
        self.current_endpoint = 0
        self.last_adjustment_time = time.time()
        self.speed_history = []  # –ò—Å—Ç–æ—Ä–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.pattern_generator = PatternGenerator()
        self.save_checked_addresses = save_checked_addresses
        self.db_connection = sqlite3.connect('bitcoin_addresses.db')
        self.cursor = self.db_connection.cursor()
        self._create_tables()
        
    def _create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS checked_addresses (
                address TEXT PRIMARY KEY,
                n_tx INTEGER DEFAULT 0,
                total_received INTEGER DEFAULT 0,
                balance INTEGER DEFAULT 0,
                last_checked TEXT
            )
        ''')
        
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS addresses_with_transactions (
                address TEXT PRIMARY KEY,
                n_tx INTEGER,
                total_received INTEGER,
                balance INTEGER,
                first_found TEXT
            )
        ''')
        
        self.db_connection.commit()

    def adjust_resources(self, current_speed: float):
        current_time = time.time()
        stats = self.resource_monitor.get_stats()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–∫–æ—Ä–æ—Å—Ç–∏
        self.speed_history.append(current_speed)
        if len(self.speed_history) > 10:
            self.speed_history.pop(0)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥ —Å–∫–æ—Ä–æ—Å—Ç–∏
        speed_trend = 0
        if len(self.speed_history) >= 2:
            speed_trend = self.speed_history[-1] - self.speed_history[0]
        
        # –†–µ–≥—É–ª–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        if current_time - self.last_adjustment_time >= 10:
            self.last_adjustment_time = current_time
            
            # –ï—Å–ª–∏ CPU –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∏–∑–∫–∞—è –∏–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –ø–∞–¥–∞–µ—Ç
            if stats['cpu'] < self.cpu_target - 5 or speed_trend < 0:
                # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å
                new_concurrency = min(500, self.api_concurrency * 2)
                if new_concurrency != self.api_concurrency:
                    print(f"\n‚ö° –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å: {self.api_concurrency} -> {new_concurrency}")
                    self.api_concurrency = new_concurrency
                    self.api_semaphore = asyncio.Semaphore(new_concurrency)
            
            # –ï—Å–ª–∏ CPU –∑–∞–≥—Ä—É–∑–∫–∞ –≤—ã—à–µ —Ü–µ–ª–µ–≤–æ–π
            elif stats['cpu'] > self.cpu_target + 5:
                # –ü–ª–∞–≤–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º
                new_concurrency = max(50, self.api_concurrency - 20)
                if new_concurrency != self.api_concurrency:
                    print(f"\n‚ö° –£–º–µ–Ω—å—à–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å: {self.api_concurrency} -> {new_concurrency}")
                    self.api_concurrency = new_concurrency
                    self.api_semaphore = asyncio.Semaphore(new_concurrency)

    async def init_session(self):
        if not self.session:
            self.session = aiohttp.ClientSession(
                timeout=aiohttp.ClientTimeout(total=10)
            )
        self.resource_monitor.start_monitoring()
            
    async def close(self):
        if self.session:
            await self.session.close()
        self.resource_monitor.stop_monitoring()
        self.process_pool.shutdown()

    async def check_address(self, address: str) -> Dict:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
        local_result = self.pattern_generator.check_address_exists(address)
        if local_result:
            has_tx, total_received = local_result
            if has_tx:
                return {
                    'n_tx': 1,  # –ú–∏–Ω–∏–º—É–º 1 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
                    'total_received': total_received,
                    'balance': 0  # –ë–∞–ª–∞–Ω—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
                }
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ API
        if address in self.cache:
            return self.cache[address]
            
        async with self.api_semaphore:
            endpoint = self.api_endpoints[self.current_endpoint]
            self.current_endpoint = (self.current_endpoint + 1) % len(self.api_endpoints)
            
            try:
                url = f"{endpoint}/address/{address}"
                async with self.session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()
                        result = self._parse_api_response(endpoint, data)
                        if result:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î
                            self.pattern_generator.add_known_address(
                                address,
                                has_transactions=result['n_tx'] > 0,
                                total_received=result['total_received']
                            )
                            self.cache[address] = result
                            return result
            except Exception as e:
                pass
                
        return None
        
    def _parse_api_response(self, endpoint: str, data: Dict) -> Dict:
        try:
            if "blockstream" in endpoint:
                return {
                    'n_tx': data.get('chain_stats', {}).get('tx_count', 0),
                    'total_received': data.get('chain_stats', {}).get('funded_txo_sum', 0),
                    'balance': data.get('chain_stats', {}).get('funded_txo_sum', 0) - 
                             data.get('chain_stats', {}).get('spent_txo_sum', 0)
                }
            elif "blockchain.info" in endpoint:
                return {
                    'n_tx': data.get('n_tx', 0),
                    'total_received': data.get('total_received', 0),
                    'balance': data.get('final_balance', 0)
                }
            elif "blockcypher" in endpoint:
                return {
                    'n_tx': data.get('n_tx', 0),
                    'total_received': data.get('total_received', 0),
                    'balance': data.get('balance', 0)
                }
            elif "btc.com" in endpoint:
                data = data.get('data', {})
                return {
                    'n_tx': data.get('tx_count', 0),
                    'total_received': data.get('received', 0),
                    'balance': data.get('balance', 0)
                }
            elif "blockchair" in endpoint:
                data = data.get('data', {}).get(address, {})
                return {
                    'n_tx': data.get('transaction_count', 0),
                    'total_received': data.get('received', 0),
                    'balance': data.get('balance', 0)
                }
            else:
                return {
                    'n_tx': data.get('transactions', 0),
                    'total_received': data.get('totalReceived', 0),
                    'balance': data.get('balance', 0)
                }
        except Exception:
            return None

async def process_batch(addresses: List[Tuple[str, bytes]], 
                       checker: OptimizedAddressChecker,
                       importer: BlockchainImporter,
                       save_checked: bool = True) -> Dict:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ –∞–¥—Ä–µ—Å–æ–≤"""
    results = {'checked': 0, 'with_tx': 0, 'errors': 0}
    
    async def check_single_address(address: str, private_key: bytes):
        try:
            result = await checker.check_address(address)
            results['checked'] += 1
            
            if result and result['n_tx'] > 0:
                results['with_tx'] += 1
                importer.save_success_address(address, private_key, "gpu_generated", result)
                print(f"\nüíé –ù–ê–ô–î–ï–ù –ê–ö–¢–ò–í–ù–´–ô –ö–û–®–ï–õ–ï–ö!")
                print(f"   –ê–¥—Ä–µ—Å: {address}")
                print(f"   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {result['n_tx']}")
                print(f"   –ë–∞–ª–∞–Ω—Å: {result['balance']} satoshi")
            elif save_checked:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –∫–æ—à–µ–ª—å–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –æ–ø—Ü–∏—è
                importer.save_checked_address(address, private_key, "gpu_generated")
                
        except Exception as e:
            results['errors'] += 1
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {address}: {e}")
    
    tasks = []
    for address, private_key in addresses:
        tasks.append(check_single_address(address, private_key))
    
    await asyncio.gather(*tasks)
    return results

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª–∞"""
    config_path = "btc_config.json"
    if os.path.exists(config_path):
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
    return None

def save_config(config):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª"""
    config_path = "btc_config.json"
    try:
        with open(config_path, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=4, ensure_ascii=False)
        print("\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")

def get_settings():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞"""
    config = load_config()
    if config:
        print("\nüìù –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?")
        print("   1 - –î–∞")
        print("   2 - –ù–µ—Ç, –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ")
        while True:
            choice = msvcrt.getch().decode()
            if choice == '1':
                return config
            elif choice == '2':
                break
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = {}
    
    print("\nüíª –ù–ê–°–¢–†–û–ô–ö–ê –ü–ê–†–ê–ú–ï–¢–†–û–í:")
    
    # CPU Usage
    print("\n–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU (10-100%):")
    while True:
        try:
            cpu = int(input(">>> "))
            if 10 <= cpu <= 100:
                settings['cpu_usage'] = cpu
                break
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 100")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    
    # RAM Usage
    print("\n–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM (10-100%):")
    while True:
        try:
            ram = int(input(">>> "))
            if 10 <= ram <= 100:
                settings['ram_usage'] = ram
                break
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 100")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    
    # Batch Size
    print("\n–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ (10-10000):")
    while True:
        try:
            batch = int(input(">>> "))
            if 10 <= batch <= 10000:
                settings['batch_size'] = batch
                break
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 10000")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    
    # API Concurrency
    print("\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤ (5-100):")
    while True:
        try:
            api = int(input(">>> "))
            if 5 <= api <= 100:
                settings['api_concurrency'] = api
                break
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 5 –¥–æ 100")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    
    # Pattern Mode
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
    print("1 - –°–ª—É—á–∞–π–Ω—ã–π")
    print("2 - –ü–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É")
    while True:
        choice = msvcrt.getch().decode()
        if choice == '1':
            settings['pattern_mode'] = 'random'
            break
        elif choice == '2':
            settings['pattern_mode'] = 'pattern'
            break
    
    # Save Empty Addresses
    print("\n–°–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—É—Å—Ç—ã–µ (–æ—Ç—á–µ–∫–∞–Ω–Ω—ã–µ) –∞–¥—Ä–µ—Å–∞?")
    print("1 - –î–∞")
    print("2 - –ù–µ—Ç")
    while True:
        choice = msvcrt.getch().decode()
        if choice == '1':
            settings['save_checked'] = True
            break
        elif choice == '2':
            settings['save_checked'] = False
            break
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    save_config(settings)
    
    return settings

async def generate_and_check_addresses():
    os.system('cls' if os.name == 'nt' else 'clear')
    print(PROGRAM_INFO)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = get_settings()
    
    # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print("\nüíª –¢–ï–ö–£–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò:")
    print(f"   CPU –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (—Ü–µ–ª—å): {settings['cpu_usage']}%")
    print(f"   RAM –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (—Ü–µ–ª—å): {settings['ram_usage']}%")
    print(f"   –î–æ—Å—Ç—É–ø–Ω–æ —è–¥–µ—Ä CPU: {psutil.cpu_count()}")
    print(f"   –î–æ—Å—Ç—É–ø–Ω–æ RAM: {psutil.virtual_memory().total / (1024**3):.1f} GB")
    print(f"   –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: {settings['batch_size']}")
    print(f"   –†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {settings['pattern_mode']}")
    print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ–∫–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: {'–í–∫–ª—é—á–µ–Ω–æ' if settings['save_checked'] else '–û—Ç–∫–ª—é—á–µ–Ω–æ'}")
    print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ —Å –±–∞–ª–∞–Ω—Å–æ–º: –í–∫–ª—é—á–µ–Ω–æ")
    
    print("\n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞...")
    msvcrt.getch()
    os.system('cls' if os.name == 'nt' else 'clear')
    
    # –î–∞–ª—å—à–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    db_path = "test.db"
    importer = BlockchainImporter(db_path)
    checker = OptimizedAddressChecker(
        batch_size=settings['batch_size'],
        api_concurrency=settings['api_concurrency'],
        cpu_usage=settings['cpu_usage'],
        ram_usage=settings['ram_usage'],
        save_checked_addresses=settings['save_checked']
    )
    
    await checker.init_session()
    importer.setup_database()
    
    print(f"\n{'='*50}")
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"{'='*50}\n")
    
    total_stats = {'checked': 0, 'with_tx': 0, 'errors': 0, 'start_time': time.time()}
    
    try:
        batch_num = 1
        while True:
            print(f"\nüìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞ {batch_num}...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
            if settings['pattern_mode'] == 'random':
                addresses = checker.pattern_generator.generate_with_pattern(
                    [], [], settings['batch_size']
                )
            else:
                addresses = checker.pattern_generator.generate_with_pattern(
                    COMMON_PATTERNS[settings['pattern_mode']], [], settings['batch_size']
                )
            
            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞ –∏–∑ {len(addresses)} –∞–¥—Ä–µ—Å–æ–≤...")
            batch_stats = await process_batch(addresses, checker, importer, settings['save_checked'])  # –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä save_checked
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            for key in batch_stats:
                total_stats[key] += batch_stats[key]
            
            resource_stats = checker.resource_monitor.get_stats()
            elapsed_time = time.time() - total_stats['start_time']
            current_speed = total_stats['checked'] / elapsed_time if elapsed_time > 0 else 0
            
            checker.adjust_resources(current_speed)
            
            print(f"\n{'='*50}")
            print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"   ‚úì –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤—Å–µ–≥–æ: {total_stats['checked']:,}")
            print(f"   üíé –° —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏: {total_stats['with_tx']}")
            print(f"   ‚ùå –û—à–∏–±–∫–∏: {total_stats['errors']}")
            print(f"   ‚è±Ô∏è –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {elapsed_time:.1f} —Å–µ–∫")
            print(f"   üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {current_speed:.1f} –∞–¥—Ä–µ—Å–æ–≤/—Å–µ–∫")
            print(f"   üíª CPU: {resource_stats['cpu']:.1f}%")
            print(f"   üßÆ RAM: {resource_stats['ram']:.1f}%")
            print(f"   üì¶ –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: {settings['batch_size']}")
            print(f"   üîÑ –¢–µ–∫—É—â–µ–µ –∫–æ–ª-–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {checker.api_concurrency}")
            if len(checker.speed_history) > 1:
                print(f"   üìà –¢—Ä–µ–Ω–¥ —Å–∫–æ—Ä–æ—Å—Ç–∏: {'‚Üë' if checker.speed_history[-1] > checker.speed_history[0] else '‚Üì'}")
            print(f"{'='*50}")
            
            batch_num += 1
            
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await checker.close()

if __name__ == "__main__":
    try:
        asyncio.run(generate_and_check_addresses())
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}") 